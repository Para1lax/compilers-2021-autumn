-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[state, world], stmt) {
  case stmt of 
    Assn (x, expr) -> 
      [state <- [x, evalExpr(state, expr)] , world]
  | Seq (stmt1, stmt2) -> 
      eval(eval(c, stmt1), stmt2)                     
  | Skip -> c                                       
  | Read (x) -> 
      case readWorld(world) of [value, world] ->
        [state <- [x, value], world] 
      esac            
  | Write (expr) ->
      var value = evalExpr(state, expr);
      [state, writeWorld(value, world)]              
  | If (condition, true_branch, false_branch) ->
      case evalExpr(state, condition) of
        0 -> eval(c, false_branch)
      | _ -> eval(c, true_branch)
      esac                                           
  | While (expr, stmt) ->
      case evalExpr(state, expr) of
        0 -> c
      | _ -> eval(eval(c, stmt), While (expr, stmt))
      esac                                          
  | DoWhile (stmt, expr) ->
      eval(eval(c, stmt), While (expr, stmt))
  | _ -> failure("Interpretator failed")
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
