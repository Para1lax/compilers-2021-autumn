-- World: holds input-output streams

import List;
import Collection;

-- Creates a world; "input" is expected to be a
-- list of integers
public fun createWorld (input) {
  [input, {}]
}

-- Writes an output into a world
public fun writeWorld (n, [input, output]) {
  [input, n:output]
}

-- Reads an input from a world; the result is
-- a pair --- the value read, the new world
public fun readWorld ([n:input, output]) {
  [n, [input, output]]
}

-- Gets an output from a world
public fun getOutput ([_, output]) {
  reverse (output)
}

public fun logging(level, message) {
  var logs = listMap({
    ["p", ">"], -- parser
    ["i", "->"], -- interpreter
    ["c", ">>"], -- compileSM
    ["s", "->>"], -- SM interpreter
    ["x", ">>>"] -- compile x86
  });
  case logs.findMap(level) of
    Some (prefix) -> printf("%s %s\n", prefix, message)
  esac
}
