-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  foldl(step, c, insns)
}

fun step(c, instr) {
  case instr of
    CONST (n) -> 
      [n: c[0], c[1], c[2]]                            |
    LD (x) -> 
      [c[1](x) : c[0], c[1], c[2]]                     |
    ST (x) -> 
      case c[0] of v:rest -> 
        [rest, c[1] <- [x, v], c[2]] esac              |
    BINOP (op) ->
      case c[0] of y:x:rest -> 
        [calculate(op, x, y):rest, c[1], c[2]] esac    |
    READ ->
      case readWorld(c[2]) of [v, next_world] ->
        [v:c[0], c[1], next_world] esac                |
    WRITE ->
      case c[0] of v:rest -> 
        [rest, c[1], writeWorld(v, c[2])] esac
  esac   
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Const (n) -> { CONST(n) } |
    Var (x) -> { LD(x) }    |
    Binop (op, l, r) -> 
      var x = compileExpr(l);
      var y = compileExpr(r);
      x +++ y +++ { BINOP(op) }
    esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (x, expr) -> compileExpr(expr) +++ { ST(x) } |
    Seq (stmt1, stmt2) -> 
      var first = compileSM(stmt1);
      var second = compileSM(stmt2);
      first +++ second                                |
    Skip -> {}                                        |
    Read (x) -> { READ, ST(x) }                       |
    Write (expr) -> compileExpr(expr) +++ { WRITE }
  esac    
}
