-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)


-- Helper function: adds a bunch of regular variables current scope
fun addVars (state, names) {
  foldl(fun (s, name) { addName(s, name, Val (0)) }, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  addName(state, name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
    case eval (c, e) of [c, v] -> [c, v : vals] esac
  }, [c, {}], exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun scopeDef(st, def) {
  case def of
    Var (names) -> addVars(st, names)
  | Fun (f, args, body) -> st.addFunction(f, args, body)
  esac
}

fun funArg(st, [param, value]) {
  addName(st, param, value) 
}


fun eval (c@[s, w], expr) {
  -- printf("\n+++ %s", expr.string);
  case expr of
    Const (n) -> [c, n]
  | Var (x) -> [c, lookup(s, x)]
  | Ref (lv) -> [c, Ref(lv)]
  | Binop (op, l, r) ->
      case evalList(c, {l, r}) of [config, {x, y}] ->
        [config, evalOp(op, x, y)]
      esac
  | Assn (x, e) -> 
      case evalList(c, {x, e}) of [[s, w], {v, rv}] -> 
        case v of 
          Ref (lv) -> [[s <- [lv, rv], w], rv] 
        | ElemRef (arr, idx) -> arr[idx] := rv; [[s, w], rv]
        esac
      esac
  | Seq (cur, next) -> 
      case eval(c, cur) of [config, v] -> eval(config, next) esac                
  | Skip -> [c, Nothing]                                             
  | If (condition, true_branch, false_branch) ->
      case eval(c, condition) of [config, pred_val] ->
        case pred_val of 
          0 -> eval(config, false_branch)
        | _ -> eval(config, true_branch)
        esac
      esac               
  | While (expr, body) ->
      case eval(c, expr) of [pred_config, pred_val] ->
        case pred_val of 
          0 -> [pred_config, Nothing]
        | _ -> eval(eval(pred_config, body).fst, While (expr, body))
        esac
      esac                                        
  | DoWhile (body, expr) -> eval(eval(c, body).fst, While (expr, body))
  | Ignore (expr) -> [eval(c, expr).fst, Void]
  | Call (f, args) ->
      case lookup(s, f) of Fun(params, body) ->
        case evalList(c, args) of [[st, w], vals] ->
          case body of
            External -> 
              case evalBuiltin(f, vals, w) of [ret, w] -> [[st, w], ret] esac
          | _ ->
            case foldl(funArg, enterFunction(st), zip(params, vals)) of st ->
              case eval([st, w], body) of [[st, w], ret] -> 
                [[leaveFunction(s, getGlobal(st)), w], ret] 
              esac
            esac
          esac
        esac
      esac
  | Scope (defs, expr) ->
      case foldl(scopeDef, enterScope(s), defs) of s ->
        case eval([s, w], expr) of [[s, w], ret] -> 
          [[leaveScope(s), w], ret] 
        esac
      esac
  | String (literal) -> [c, literal]
  | Array (exprs) ->
      case evalList(c, exprs) of [c, elements] ->
        [c, listArray(elements)]
      esac
  | Elem (arr, idx) ->
      case evalList(c, {arr, idx}) of [c, {arr, idx}] ->
        case arr of
          Sexp (_, arr) -> [c, arr[idx]]
        | _ -> [c, arr[idx]]
        esac
      esac
  | ElemRef (arr, idx) ->
      case evalList(c, {arr, idx}) of [c, {arr, idx}] ->
        case arr of
          Sexp (_, arr) -> [c, ElemRef (arr, idx)]
        | _ -> [c, ElemRef (arr, idx)]
        esac
      esac
  | Sexp (name, args) ->
      case evalList(c, args) of [c, args] ->
        [c, Sexp (name, listArray(args))]
      esac
  | Set (x, e) -> eval(c, Assn (Ref (x), e))
  | _ -> failure("Interpretator failed on %s\n", expr)
  esac
}

fun linkBuiltins(state, builtins) {
  foldl(fun(s, [f, sign@Fun(_, External)]) { addName(s, f, sign) }, state, builtins)
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([enterScope(emptyState()).linkBuiltins({
      ["read", Fun ({}, External)], 
      ["write", Fun ({"a"}, External)], 
      ["length", Fun ({"a"}, External)]
    }), createWorld (input)], expr) of [c, _] -> c.snd.getOutput
  esac
}
