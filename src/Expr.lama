-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
    Const (n) -> n   |
    Var (x) -> st(x) |
    Binop (op, l, r) ->
      var x = evalExpr(st, l);
      var y = evalExpr(st, r);
      case op of
        "+"  -> x + y  |
        "-"  -> x - y  |
        "*"  -> x * y  |
        "/"  -> x / y  |
        "%"  -> x % y  |
        "==" -> x == y |
        "!=" -> x != y |
        "<"  -> x < y  |
        "<=" -> x <= y |
        ">"  -> x > y  |
        ">=" -> x >= y |
        "&&" -> x && y |
        "!!" -> x !! y |
        _    -> failure("Unknown operand '%s'", op) 
      esac
   esac
}
