-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  --printf("\n----\n%s", expr.string);
  case expr of
    Const (n) -> [c, n]
  | Var (x) -> [c, s(x)]
  | Binop (op, l, r) ->
      case evalList(c, {l, r}) of 
        [config, {x, y}] -> [config, evalOp(op, x, y)]
      esac
  | Assn (x, e) -> 
      case evalList(c, {x, e}) of [[st, world], {v, rv}] -> 
        case v of Ref (lv) -> [[st <- [lv, rv], world], rv] 
        | _ -> failure("Expected lvalue, got %s", v.string) 
        esac
      esac
  | Seq (cur, next) -> 
      case eval(c, cur) of [config, v] -> eval(config, next) esac                
  | Skip -> [c, Nothing]                                       
  | Read (x) -> 
      case readWorld(w) of [lv, world] ->
        [[s <- [x, lv], world], Nothing]
      esac            
  | Write (expr) ->
      case eval(c, expr) of [[st, world], t] ->
        [[st, writeWorld(t, world)], Nothing]
      esac           
  | If (condition, true_branch, false_branch) ->
      case eval(c, condition) of [config, pred_val] ->
        case pred_val of 
          0 -> eval(config, false_branch)
        | _ -> eval(config, true_branch)
        esac
      esac               
  | While (expr, body) ->
      case eval(c, expr) of [pred_config, pred_val] ->
        case pred_val of 
          0 -> [pred_config, Nothing]
        | _ -> eval(eval(pred_config, body)[0], While (expr, body))
        esac
      esac                                        
  | DoWhile (body, expr) -> eval(eval(c, body)[0], While(expr, body))
  | Ignore (expr) -> [eval(c, expr)[0], Void]
  | Ref (lv) -> [c, Ref (lv)]
  | _ -> failure("Interpretator failed on %s\n", expr)
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
